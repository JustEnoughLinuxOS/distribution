diff -rupN linux.orig/drivers/input/touchscreen/goodix.c linux/drivers/input/touchscreen/goodix.c
--- linux.orig/drivers/input/touchscreen/goodix.c	2023-12-15 19:18:57.364913158 +0000
+++ linux/drivers/input/touchscreen/goodix.c	2023-12-15 19:20:05.987107578 +0000
@@ -1037,7 +1037,7 @@ retry_get_irq_gpio:
 	default:
 		if (ts->gpiod_int && ts->gpiod_rst) {
 			ts->reset_controller_at_probe = true;
-			ts->load_cfg_from_disk = true;
+			ts->load_cfg_from_disk = false;
 			ts->irq_pin_access_method = IRQ_PIN_ACCESS_GPIO;
 		}
 	}
diff -rupN linux.orig/drivers/gpio/gpio-rockchip.c linux/drivers/gpio/gpio-rockchip.c
--- linux.orig/drivers/gpio/gpio-rockchip.c	2023-12-15 19:18:55.020838176 +0000
+++ linux/drivers/gpio/gpio-rockchip.c	2023-12-15 19:20:05.987107578 +0000
@@ -335,13 +335,13 @@ static void rockchip_irq_demux(struct ir
 	unsigned long pending;
 	unsigned int irq;
 
-	dev_dbg(bank->dev, "got irq for bank %s\n", bank->name);
+	//dev_dbg(bank->dev, "got irq for bank %s\n", bank->name);
 
 	chained_irq_enter(chip, desc);
 
 	pending = readl_relaxed(bank->reg_base + bank->gpio_regs->int_status);
 	for_each_set_bit(irq, &pending, 32) {
-		dev_dbg(bank->dev, "handling irq %d\n", irq);
+		//dev_dbg(bank->dev, "handling irq %d\n", irq);
 
 		/*
 		 * Triggering IRQ on both rising and falling edge
diff --git a/sound/soc/soc-pcm.c b/sound/soc/soc-pcm.c
index f3964060a044..dc1ffb3a098b 100644
--- a/sound/soc/soc-pcm.c
+++ b/sound/soc/soc-pcm.c
@@ -41,9 +41,6 @@ static inline int _soc_pcm_ret(struct snd_soc_pcm_runtime *rtd,
 	case -ENOTSUPP:
 		break;
 	default:
-		dev_err(rtd->dev,
-			"ASoC: error at %s on %s: %d\n",
-			func, rtd->dai_link->name, ret);
 	}
 
 	return ret;
@@ -2438,8 +2435,6 @@ static int dpcm_fe_dai_prepare(struct snd_pcm_substream *substream)
 
 	/* there is no point preparing this FE if there are no BEs */
 	if (list_empty(&fe->dpcm[stream].be_clients)) {
-		dev_err(fe->dev, "ASoC: no backend DAIs enabled for %s\n",
-				fe->dai_link->name);
 		ret = -EINVAL;
 		goto out;
 	}
