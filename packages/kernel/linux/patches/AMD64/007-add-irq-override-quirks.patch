diff --color -rupN linux.orig/drivers/acpi/resource.c linux/drivers/acpi/resource.c
--- linux.orig/drivers/acpi/resource.c	2023-05-14 11:15:56.883145312 -0400
+++ linux/drivers/acpi/resource.c	2023-05-14 11:22:05.436042175 -0400
@@ -36,6 +36,35 @@ static inline bool
 acpi_iospace_resource_valid(struct resource *res) { return true; }
 #endif
 
+#ifdef CONFIG_X86
+/* Enable a quirk to allow override on some AMD 6800 series devices */ 
+static bool needs_irq_override = false;
+
+static int __init irq_override_fixup(const struct dmi_system_id *id)
+{
+        needs_irq_override = true;
+        return 1;
+}
+
+static const struct dmi_system_id resource_quirk_table[] __initconst = {
+        {
+                .matches = {
+                        DMI_EXACT_MATCH(DMI_SYS_VENDOR, "AYANEO"),
+                        DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "AIR Plus"),
+                },
+                .callback = irq_override_fixup,
+        },
+        {
+                .matches = {
+                        DMI_EXACT_MATCH(DMI_SYS_VENDOR, "GPD"),
+                        DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "G1619-04"),
+                },
+                .callback = irq_override_fixup,
+        },
+        { }
+};
+#endif
+
 #if IS_ENABLED(CONFIG_ACPI_GENERIC_GSI)
 static inline bool is_gsi(struct acpi_resource_extended_irq *ext_irq)
 {
@@ -542,7 +571,9 @@ static bool acpi_dev_irq_override(u32 gs
 	 * this override breaks active low IRQs on AMD Ryzen 6000 and
 	 * newer systems. Skip it.
 	 */
-	if (boot_cpu_has(X86_FEATURE_ZEN))
+	dmi_check_system(resource_quirk_table);
+	if (boot_cpu_has(X86_FEATURE_ZEN) &&
+	   needs_irq_override == false)
 		return false;
 #endif
 
@@ -963,3 +994,4 @@ struct acpi_device *acpi_resource_consum
 	acpi_get_devices(NULL, acpi_res_consumer_cb, res, (void **) &consumer);
 	return consumer;
 }
+
