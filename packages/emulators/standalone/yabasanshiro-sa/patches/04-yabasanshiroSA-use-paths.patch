--- a/yabause/src/retro_arena/main.cpp
+++ b/yabause/src/retro_arena/main.cpp
@@ -286,12 +286,12 @@
 
   // Inisialize home directory
   std::string home_dir = getenv("HOME");
-  home_dir += "/.yabasanshiro/";
+  home_dir = "/storage/.config/yabasanshiro/";
   struct stat st = {0};
   if (stat(home_dir.c_str(), &st) == -1) {
     mkdir(home_dir.c_str(), 0700);
   }  
-  std::string bckup_dir = home_dir + "backup.bin";
+  std::string bckup_dir = "/storage/roms/bios/yabasanshiro/backup.bin";
   strcpy( buppath, bckup_dir.c_str() );
   strcpy( s_savepath, home_dir.c_str() );
   g_keymap_filename = home_dir + "keymapv2.json";
@@ -597,7 +597,7 @@
         if( ret == 0 ){
           char pngname[256];
           snprintf(pngname,256,"%s/%s_%d.png", s_savepath, cdip->itemnum, e.user.code);
-          fs::copy(tmpfilename, pngname, fs::copy_options::overwrite_existing );
+           system((std::string("cp -f ") + tmpfilename + " " + pngname).c_str()); 
         }
         hideMenuScreen();
       }

--- a/yabause/src/retro_arena/Preference.cpp
+++ b/yabause/src/retro_arena/Preference.cpp
@@ -17,7 +17,7 @@
   }
 
   std::string home_dir = getenv("HOME");
-  home_dir += "/.yabasanshiro/";
+  home_dir = "/storage/.config/yabasanshiro/";
 
   this->filename = home_dir + input_trace_filename + ".config";
 
--- a/yabause/src/retro_arena/InputManager.cpp
+++ b/yabause/src/retro_arena/InputManager.cpp
@@ -213,7 +213,7 @@
 
   if( SDL_NumJoysticks() == 0 ){
 
-    PADLOG("No joy stic is found force to keyboard\n");
+    PADLOG("No joystick is found force to keyboard\n");
     padbits = PerPadAdd(&PORTDATA1);
     if( configs.find("player1") == configs.end() ){
       return setDefalutSettings(padbits);
@@ -460,22 +460,22 @@
   }
 
   Input result;
-  inputconfig->getInputByName("a", &result);
+  inputconfig->getInputByName("y", &result);
   player[guid]["a"] ={ { "type", input_types[result.type] },{ "id", result.id },{ "value", result.value } };
 
   inputconfig->getInputByName("b", &result);
   player[guid]["b"] = { { "type", input_types[result.type] },{ "id", result.id },{ "value", result.value } };
 
-  inputconfig->getInputByName("rightshoulder", &result);
+  inputconfig->getInputByName("a", &result);
   player[guid]["c"] = { { "type", input_types[result.type] },{ "id", result.id },{ "value", result.value } } ;
 
   inputconfig->getInputByName("x", &result);
   player[guid]["x"] = { { "type", input_types[result.type] },{ "id", result.id },{ "value", result.value } };
 
-  inputconfig->getInputByName("y", &result);
+  inputconfig->getInputByName("leftshoulder", &result);
   player[guid]["y"] = { { "type", input_types[result.type] },{ "id", result.id },{ "value", result.value } };
 
-  inputconfig->getInputByName("leftshoulder", &result);
+  inputconfig->getInputByName("rightshoulder", &result);
   player[guid]["z"] = { { "type", input_types[result.type] },{ "id", result.id },{ "value", result.value } };
 
   inputconfig->getInputByName("lefttrigger", &result);
@@ -1209,7 +1209,7 @@
 std::string InputManager::getConfigPath()
 {
   std::string path = getenv("HOME");
-  path += "/.emulationstation/es_temporaryinput.cfg";
+  path = "/storage/.config/yabasanshiro/input.cfg";
   return path;
 }
 
